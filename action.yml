name: 'Dokploy Compose Deploy'
description: 'Build & push Docker image, update compose, deploy via Dokploy'
branding:
  icon: "upload-cloud"
  color: "blue"

inputs:
  dokploy_domain:
    description: 'Dokploy panel domain (without protocol)'
    required: true
  api_key:
    description: 'API key for Dokploy'
    required: true
  compose_id:
    description: 'Compose ID in Dokploy'
    required: true
  registry_domain:
    description: 'Docker registry domain (empty = DockerHub/local)'
    required: false
    default: ""
  registry_username:
    description: 'Docker registry username'
    required: false
  registry_token:
    description: 'Docker registry password/token'
    required: false
  image_name:
    description: 'Image name (repository/name)'
    required: true
  tag:
    description: 'Tag for the image'
    required: false
    default: 'latest'
  dockerfile_path:
    description: 'Path to the Dockerfile'
    required: false
    default: 'Dockerfile'
  context_path:
    description: 'Build context directory'
    required: false
    default: ""
  compose_path:
    description: 'Path to docker-compose.yml'
    required: false
    default: 'docker-compose.yml'
  do_clean:
    description: 'Whether to run cleanAll after deploy'
    required: false
    default: 'false'
  debug:
    description: 'Enable debug logging (true/false)'
    required: false
    default: 'false'

outputs:
  deployment_id:
    description: 'Deployment ID from Dokploy'
  status:
    description: 'Deployment status'
  logs:
    description: 'Deployment logs'

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate inputs
      run: |
        set -euo pipefail
        if [ -z "${{ inputs.dokploy_domain }}" ]; then
          echo "❌ dokploy_domain is required"; exit 1
        fi
        if [ -z "${{ inputs.api_key }}" ]; then
          echo "❌ api_key is required"; exit 1
        fi
        if [ -z "${{ inputs.compose_id }}" ]; then
          echo "❌ compose_id is required"; exit 1
        fi
      shell: bash

    - name: Enable debug mode
      if: ${{ inputs.debug == 'true' }}
      run: |
        echo "🔎 Debug mode enabled"
        set -x
      shell: bash

    - name: Determine build context
      id: prepare
      run: |
        set -euo pipefail
        if [ -z "${{ inputs.context_path }}" ]; then
          CONTEXT_DIR=$(dirname "${{ inputs.dockerfile_path }}")
        else
          CONTEXT_DIR="${{ inputs.context_path }}"
        fi
        echo "context_dir=$CONTEXT_DIR" >> $GITHUB_OUTPUT
      shell: bash

    - name: Login to Docker registry
      if: inputs.registry_username != '' && inputs.registry_token != ''
      run: |
        set -euo pipefail
        echo "🔐 Logging in to Docker registry..."
        echo "${{ inputs.registry_token }}" | docker login ${{ inputs.registry_domain }} -u ${{ inputs.registry_username }} --password-stdin
      shell: bash

    - name: Build and push image
      run: |
        set -euo pipefail
        echo "🚀 Building image..."
        IMAGE_TAG="${{ inputs.image_name }}:${{ inputs.tag }}"
        if [ -n "${{ inputs.registry_domain }}" ]; then
          IMAGE="${{ inputs.registry_domain }}/$IMAGE_TAG"
        else
          IMAGE="$IMAGE_TAG"
        fi
        echo "📦 Image = $IMAGE"

        docker build -f "${{ inputs.dockerfile_path }}" -t "$IMAGE" "${{ steps.prepare.outputs.context_dir }}"
        docker push "$IMAGE"
      shell: bash

    - name: Update Compose file locally
      run: |
        set -euo pipefail
        echo "🔧 Updating docker-compose.yml..."
        if [ -n "${{ inputs.registry_domain }}" ]; then
          IMAGE="${{ inputs.registry_domain }}/${{ inputs.image_name }}:${{ inputs.tag }}"
        else
          IMAGE="${{ inputs.image_name }}:${{ inputs.tag }}"
        fi

        if command -v yq >/dev/null 2>&1; then
          yq e "(.services[] | select(.image | contains(\"${{ inputs.image_name }}\"))).image = \"$IMAGE\"" -i ${{ inputs.compose_path }}
          cp ${{ inputs.compose_path }} composed.tmp.yml
        else
          sed "s|image:.*${{ inputs.image_name }}.*|image: $IMAGE|" ${{ inputs.compose_path }} > composed.tmp.yml
        fi
      shell: bash

    - name: Update Compose in Dokploy
      run: |
        set -euo pipefail
        echo "📤 Sending updated compose to Dokploy..."
        PAYLOAD=$(jq -Rs . < composed.tmp.yml)
        RESP=$(curl -fs -X POST "https://${{ inputs.dokploy_domain }}/api/compose/update" \
          -H "x-api-key: ${{ inputs.api_key }}" \
          -H "Content-Type: application/json" \
          -d "{
                \"composeId\": \"${{ inputs.compose_id }}\",
                \"composeFile\": $PAYLOAD
              }")
        echo "✅ Compose updated"
      shell: bash

    - name: Trigger Deploy
      id: deploy
      run: |
        set -euo pipefail
        echo "🚀 Triggering deployment..."
        RESP=$(curl -fs -X POST "https://${{ inputs.dokploy_domain }}/api/compose/deploy" \
          -H "x-api-key: ${{ inputs.api_key }}" \
          -H "Content-Type: application/json" \
          -d "{\"composeId\": \"${{ inputs.compose_id }}\"}")

        echo "deployment_id=$(echo $RESP | jq -r .deploymentId)" >> $GITHUB_OUTPUT
        echo "status=$(echo $RESP | jq -r .status)" >> $GITHUB_OUTPUT
        echo "logs=$(echo $RESP | jq -r .logs)" >> $GITHUB_OUTPUT
      shell: bash

    - name: Clean if requested
      if: ${{ inputs.do_clean == 'true' }}
      run: |
        set -euo pipefail
        echo "🧹 Running cleanup..."
        curl -fs -X POST "https://${{ inputs.dokploy_domain }}/api/settings/cleanAll" \
          -H "x-api-key: ${{ inputs.api_key }}" \
          -H "Content-Type: application/json"
      shell: bash
